<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>objCharParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initalize Player Variables

//Movement
playerSpeed = 2.5; //How fast the player can move
image_speed = 0; //Setting the initial speed to 0, so the character doesn't animate
beforeBattleX = 0; //Initializing, so character returns to position before battle
beforeBattleY = 0; //Initializing, so character returns to position before battle

//Character Info
firstName = "Sara"; //Setting the characters name
lastName = "Farine";

//Combat Specs
currentLevel = 1; //Setting up starting level
currentXP = 0; //Keeps track of XP gained during the game
maxXP = (currentLevel * 25); //When reached, the character will level up
maxHealth = (10 + currentLevel); //Total health, directly connected to level
currentHealth = maxHealth; //Setting starting health to max
damage = 7; //Damage to enemy, could be directly connected to weapons + stats
defense = 1; //How much less damage the character takes
defenseWhileDefending = 1.5; //While defending in battle
maxEnergy = 100; //How often the player can attack
currentEnergy = maxEnergy; //Set it to full to start
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement &amp; Animation
if(!inCombat) //This will not allow the play to move while in combat
{
    if(keyboard_check(ord("D"))) //Checks to see if the player is pressing down on D, if they are, do the actions inside
    {
        x += playerSpeed; //Move the player right by a certain amount of pixels per step, emulating movement
        image_speed = playerSpeed / (room_speed/2.5); //Keep the animation of the player walking smooth and even
        sprite_index = sprSaraWalkRight; //Choose which sprite to select while walking right
    }
    if(keyboard_check(ord("W")))
    {
        y -= playerSpeed;
        image_speed = playerSpeed / (room_speed/2.5);
        sprite_index = sprSaraWalkUp;
    }
    if(keyboard_check(ord("A")))
    {
        x -= playerSpeed;
        image_speed = playerSpeed / (room_speed/2.5);
        sprite_index = sprSaraWalkLeft;
    }
    if(keyboard_check(ord("S")))
    {
        y += playerSpeed;
        image_speed = playerSpeed / (room_speed/2.5);
        sprite_index = sprSaraWalkDown;
    }
    //Check to see when the player isn't pressing down one of these keys, and make it so the character stands still
    if(keyboard_check_released(ord("D")) || keyboard_check_released(ord("W")) || keyboard_check_released(ord("A")) || keyboard_check_released(ord("S")))
    {
        image_speed = 0;
        image_index = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tracking Player Stats
if(currentXP &gt;= maxXP) //Will occur after a battle
{
    leftOverXP = (currentXP - maxXP); //Keeping track of extra XP
    ++currentLevel; //Increase level of current character
    currentXP = 0; //Reset the amount of current XP
    if(leftOverXP &gt; 0) //Assign left over XP, if any exists
        currentXP += leftOverXP;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Increase energy while in battle
if(inCombat &amp;&amp; !playerAttacking) //Only while battleing and not currently attacking
{
    if(currentEnergy &lt; maxEnergy) //If it's less than full
        currentEnergy += .25; //Increase it over time
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(playerAttacking) //This will only happen after selecting to attack an enemy
{
    image_index = 0; //Stay on the first image
    image_speed = 0; //Stop animating
    enemyID.currentHealth -= (damage - enemyID.defense); //Deal the damage
    selectingEnemy = false; //Take the player back to the battle menu
    playerAttacking = false; //And reset this, since character is done attacking
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
