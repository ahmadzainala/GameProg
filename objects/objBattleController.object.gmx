<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite20</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setting up global variables
globalvar enemyID, inCombat, battleMenuSelection, choosingEnemy, enemySelection;
globalvar playerAttacking, ranAway, isDefending, menang, status, point, aksi;
globalvar killMonster, action, roomBefore;
enemyID = 0; //Initalizing enemyID
inCombat = false; //The game starts not in combat, need to initialize
battleMenuSelection = 0; //Sets up initial selection
selectingEnemy = false;//Whether the player is selecting an enemy
enemySelection = 0; //Which enemy the player is selecting
playerAttacking = false; //Whether the player is currently attacking
ranAway = false; //Player flees battle, doesn't get items or XP
isDefending = false; //Whether the player is currently defending or not
menang = false;
status = true;
point = 0;
aksi = 0;
killMonster = 0;

//Battle Menu, an array of options the player can choose from
battleMenu[0] = "Attack";
battleMenu[1] = "Health_B";
battleMenu[2] = "Mana_B";
battleMenu[3] = "Defend";
battleMenu[4] = "Escape";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn the enemy

instance_create(300, 100, enemyID);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Increase players defense while defending
if(inCombat)
{
    if(isDefending) //If player is defending
        obHero.defense = obHero.defenseWhileDefending; //Increase defense
    if(!isDefending)
        obHero.defense = 10; //Otherwise make it original defense
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Checking win / lose conditions
if(inCombat)
{
    if(enemyID.currentHealth &lt;= 0)
    {
        object_set_depth(obHero, -1);
        obHero.currentXP += enemyID.XP; //Grant character the XP of the dead enemy
        obHero.x = obHero.beforeBattleX;
        obHero.y = obHero.beforeBattleY;
        obHero.sprite_index = Hero;//Change sprite from battle
        
        with(enemyID) //Destroy the enemy
            instance_destroy();
        enemyID = 0;
    
        room_goto(roomBefore); //Go back to the last room
        //Move character back to original location
        instance_create(0, 0, objFade); //Fades the screen
        
        
        inCombat = false; //No longer in combat
        menang = true;
    }
    
    if(obHero.currentHealth &lt;= 0)
    {
        object_set_depth(obHero, -1);
        obHero.currentHealth = 100;
        obHero.currentMana = 100;
        obHero.x = 32;
        obHero.y = 32;
        obHero.sprite_index = Hero;//Change sprite from battle
        enemyID = 0;
        room_goto(roomBefore); //Go back to the last room
        //Move character back to original location
        instance_create(0, 0, objFade); //Fades the screen
        
        inCombat = false; //No longer in combat
        menang = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Successfully running from battle
if(ranAway)
{
    object_set_depth(obHero, -1);
    with(enemyID) //Destroy the enemy
        instance_destroy();
    enemyID = 0;
    room_goto(roomBefore); //Go back to the last room
    //Move character back to original location
    obHero.x = 32;
    obHero.y = 32;
    obHero.sprite_index = Hero;//Change sprite from battle
    instance_create(0, 0, objFade); //Fades the screen
    inCombat = false; //No longer in combat
    ranAway = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(inCombat){
///Menyerang ketika sekian detik
if(status == false &amp;&amp; enemyID.currentEnergy &lt; 60)
{
    status = true;
    maxDamage = 0;
    
    if(enemyID.currentHealth &gt;= 70 &amp;&amp; obHero.currentHealth &gt;= 70){
//state awal (HP &gt; 70 &amp;&amp; MANA &gt; 70 (baik musuh maupun player))
        if(point &gt;= 10){ //jika lebih kecil atau sama dengan player atau lebih 20 dari player
            enemyID.damage= 10;
            enemyID.mAdamage= 5 + (5 * (enemyID.currentMana / obHero.currentMana));
            enemyID.mBdamage= 5 + (10 * (enemyID.currentMana / obHero.currentMana));
             enemyID.defense = 0;
        }else{ //jika lebih kecil dari player
            enemyID.damage= 10;
            enemyID.mAdamage= 5 + (5 * (enemyID.currentMana / obHero.currentMana));
            enemyID.mBdamage= 5;
             enemyID.defense = 0;
       }
    }else if(enemyID.currentHealth &gt; 70 &amp;&amp; obHero.currentHealth &lt;= 70 &amp;&amp; obHero.currentHealth &gt; 40){
        if(point &lt;= 10){
            enemyID.damage= 10;
            enemyID.mAdamage= 5 + (5 * (enemyID.currentMana / obHero.currentMana)) - (5 * (obHero.currentHealth / enemyID.currentHealth));
            enemyID.mBdamage= 5 + (5 * (enemyID.currentMana / obHero.currentMana));
             enemyID.defense = 0;
        }else{
            enemyID.damage= 10;
            enemyID.mAdamage= 5 + (10 * (enemyID.currentMana / obHero.currentMana)) + (5 * (obHero.currentHealth / enemyID.currentHealth));
            enemyID.mBdamage= 5 + (15 * (enemyID.currentMana / obHero.currentMana));
             enemyID.defense = 0;
        }
    }else if(enemyID.currentHealth &gt; 70 &amp;&amp; obHero.currentHealth &lt;= 40){
        if(point &lt;= 10){
            enemyID.damage= 10;
            enemyID.mAdamage= 5 + (5 * (enemyID.currentMana / obHero.currentMana));
            enemyID.mBdamage= 5;
             enemyID.defense = 0;
        }else{
            enemyID.damage= 10;
            enemyID.mAdamage= 5 + (5 * (enemyID.currentMana / obHero.currentMana));
            enemyID.mBdamage= 5 + (10 * (enemyID.currentMana / obHero.currentMana));
             enemyID.defense = 0;
        }
    }else if(enemyID.currentHealth &lt;= 70 &amp;&amp; enemyID.currentHealth &gt; 40 &amp;&amp; obHero.currentHealth &gt; 70){
        if(point &lt;= 10){
            enemyID.damage= 15;
            enemyID.mAdamage= 5 + (5 * (enemyID.currentMana / obHero.currentMana));
            enemyID.mBdamage= 5;
             enemyID.defense = 0;
        }else{
            enemyID.damage= 15;
            enemyID.mAdamage= 5 + (5 * (enemyID.currentMana / obHero.currentMana)) + (10 * (obHero.currentHealth / enemyID.currentHealth));
            enemyID.mBdamage= 5 + (15 * (enemyID.currentMana / obHero.currentMana));
             enemyID.defense = 0;
        }
    }else if(enemyID.currentHealth &lt;= 70 &amp;&amp; enemyID.currentHealth &gt; 40 &amp;&amp; obHero.currentHealth &lt;= 70 &amp;&amp; obHero.currentHealth &gt; 40){
        if(point &lt; 8){
            enemyID.damage= 15;
            enemyID.mAdamage= 5 + (5 * (enemyID.currentMana / obHero.currentMana));
            enemyID.mBdamage= 5;
             enemyID.defense = 0;
        }else if(point &gt;= 8 &amp;&amp; point &lt; 12){
            enemyID.damage= 15;
            enemyID.mAdamage= 5 + (10 * (obHero.currentHealth / enemyID.currentHealth));
            enemyID.mBdamage= 5 + (15 * (enemyID.currentMana / obHero.currentMana));
             enemyID.defense = 0;
        }else{
            enemyID.damage= 15;
            enemyID.mAdamage= 5 + (5 * (enemyID.currentMana / obHero.currentMana) + (10 * (obHero.currentHealth / enemyID.currentHealth)));
            enemyID.mBdamage= 5 + (15 * (enemyID.currentMana / obHero.currentMana));
             enemyID.defense= 15;
        }
    }else if(enemyID.currentHealth &lt;= 70 &amp;&amp; enemyID.currentHealth &gt; 40 &amp;&amp; obHero.currentHealth &lt;= 40){
        if(point &lt; 8){
            enemyID.damage= 10;
            enemyID.mAdamage= 5 + (5 * (enemyID.currentMana / obHero.currentMana));
            enemyID.mBdamage= 5;
             enemyID.defense = 0;
        }else if(point &gt;= 8 &amp;&amp; point &lt; 12){
            enemyID.damage= 10;
            enemyID.mAdamage= 5;
            enemyID.mBdamage= 5 + (10 * (enemyID.currentMana / obHero.currentMana));
             enemyID.defense = 0;
        }else{
            enemyID.damage= 15;
            enemyID.mAdamage= 5 + (5 * (enemyID.currentMana / obHero.currentMana));
            enemyID.mBdamage= 5 + (15 * (enemyID.currentMana / obHero.currentMana));
             enemyID.defense = 0;
        }
    }else if(enemyID.currentHealth &lt;= 40 &amp;&amp; obHero.currentHealth &gt; 70){
        if(point &lt; 8){
            enemyID.damage= 15;
            enemyID.mAdamage= 5;
            enemyID.mBdamage= 5;
             enemyID.defense= 15;
        }else if(point &gt;= 8 &amp;&amp; point &lt; 12){
            enemyID.damage= 15;
            enemyID.mAdamage= 5 + (10 * (obHero.currentHealth / enemyID.currentHealth)) + (5 * (enemyID.currentMana / obHero.currentMana));
            enemyID.mBdamage= 5 + (17 * (enemyID.currentMana / obHero.currentMana));
             enemyID.defense= 15;
        }else{
            enemyID.damage= 15;
            enemyID.mAdamage= 5 + (10 * (enemyID.currentMana / obHero.currentMana)) + (5 * (obHero.currentHealth / enemyID.currentHealth));
            enemyID.mBdamage= 5 + (18 * (enemyID.currentMana / obHero.currentMana));
             enemyID.defense= 30;
        }
    }else if(enemyID.currentHealth &lt;= 40 &amp;&amp; obHero.currentHealth &lt;= 70 &amp;&amp; obHero.currentHealth &gt; 40){
          if(point &lt; 8){
            enemyID.damage= 15;
            enemyID.mAdamage= 5;
            enemyID.mBdamage= 5;
            enemyID.defense= 15;
        }else if(point &gt;= 8 &amp;&amp; point &lt; 12){
            enemyID.damage= 15;
            enemyID.mAdamage= 5;
            enemyID.mBdamage= 5 + (10 * (enemyID.currentMana / obHero.currentMana));
             enemyID.defense= 15;
        }else{
            enemyID.damage= 15;
            enemyID.mAdamage= 5 + (10 * (enemyID.currentMana / obHero.currentMana)) + (10 * (obHero.currentHealth / enemyID.currentHealth));
            enemyID.mBdamage= 5 + (10 * (enemyID.currentMana / obHero.currentMana));
             enemyID.defense= 30;
        }
    }else if(enemyID.currentHealth &lt;= 40 &amp;&amp; obHero.currentHealth &lt;= 40){
        if(point &lt; 8){
            enemyID.damage= 15;
            enemyID.mAdamage= 5;
            enemyID.mBdamage= 5;
             enemyID.defense= 15;
        }else if(point &gt;= 8 &amp;&amp; point &lt; 12){
            enemyID.damage= 15;
            enemyID.mAdamage= 5;
            enemyID.mBdamage= 5 + (10 * (enemyID.currentMana / obHero.currentMana));
             enemyID.defense= 15;
        }else{
            enemyID.damage= 15;
            enemyID.mAdamage= 5 + (10 * (enemyID.currentMana / obHero.currentMana)) - (10 * (obHero.currentHealth / enemyID.currentHealth));
            enemyID.mBdamage= 5 + (15 * (enemyID.currentMana / obHero.currentMana));
             enemyID.defense= 30;
        }
    }else{
        enemyID.damage= 10 + (5 * (obHero.currentHealth / enemyID.currentHealth));
        enemyID.mAdamage = 5 + (5 * (enemyID.currentMana / obHero.currentMana));
        enemyID.mAdamage = 5 + (10 * (enemyID.currentMana / obHero.currentMana));
         enemyID.defense = 0;
    }
        
        if((enemyID.damage &gt; enemyID.mAdamage &amp;&amp; enemyID.damage &gt; enemyID.mBdamage) || enemyID.currentMana &lt; 10){
        
            maxDamage = enemyID.damage;
            action = "E:Serang balik!";
        }
        
        if(enemyID.damage &lt; enemyID.mAdamage &amp;&amp; enemyID.mAdamage &gt; enemyID.mBdamage &amp;&amp; enemyID.currentMana &gt;= 15){
            maxDamage = enemyID.mAdamage;
            enemyID.currentMana -= 15;
            action = "E:Health Burn!";
        }
    
        if(enemyID.mAdamage &lt; enemyID.mBdamage &amp;&amp; enemyID.damage &lt; enemyID.mBdamage &amp;&amp; enemyID.currentMana &gt;= 30){
            maxDamage = enemyID.mBdamage;
            enemyID.currentMana -= 30;
            action = "E:Mana Burn!";
        }
        
        enemyID.defense =  enemyID.defense;
        if(enemyID.defense &gt; 10 &amp;&amp; enemyID.currentMana &gt;= 20){
            action+= " heal++";
            enemyID.currentMana -= 20;
        }else if(enemyID.currentMana &lt; 20){
            enemyID.defense = 0;
        }
        
    
    enemyID.currentEnergy = 100;
    if(maxDamage != 0){
        obHero.currentHealth -= (maxDamage - obHero.defense);
        point -= (maxDamage - obHero.defense);
    }
    show_debug_message(string(point));
    
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Menu Selection during battles
if(inCombat) //Only selectable while in combat
{   
    //obHero.sprite_index = spPath;
    if(aksi == 0){
        action = "Serang musuh!";
    }else if(aksi == 1){
         action = "Sihir musuh! ~Burn";
    }else if(aksi == 2){
        action = "Sihir musuh! ~Mana";
    }
    //draw_text(x + 50, y, action);
    //Navigating through the battle menu options fluidly
    if(keyboard_check_pressed(vk_left)) //Checks A key, could be anything
    {
        if((battleMenuSelection - 1) &lt; 0){ //If player tries to go too far left
            battleMenuSelection = (array_length_1d(battleMenu) - 1); //Takes them to the last option
        }else{
            battleMenuSelection -= 1; //Otherwise, they move left 1
        }
    }
    else if(keyboard_check_pressed(vk_right))
    {
        if((battleMenuSelection + 1) &gt; (array_length_1d(battleMenu)-1)){
            battleMenuSelection = 0;
        }else{
            battleMenuSelection += 1;
        }
    }
    ////////////////////Selecting an enemy to attack////////////////////////
    if(battleMenuSelection == 0 &amp;&amp; keyboard_check_pressed(vk_space))
    {
        if(status == true) //Must have at least half energy to defend
        {
            status = false;
            aksi = 0;
            playerAttacking = true; //Queue the animation
            obHero.currentEnergy = 100; //it costs energy to attempt to flee
            
            obHero.critical = random(2);
            obHero.damage = 15;
            obHero.mAdamage = 0;
            obHero.mBdamage = 0;
            
            if(obHero.critical &gt;= 1.5){
                obHero.damage += 15*(random(100)/100);
            }
            
            selectingEnemy = false //After attacking, make it so not selecting
            isDefending = false; //Since now attacking the enemy   
        }
    }
    ////////////////////Selecting an enemy to magic A////////////////////////
    if(battleMenuSelection == 1 &amp;&amp; keyboard_check_pressed(vk_space))
    {
        if(status == true) //Must have at least half energy to defend
        {
            
            status = false;
            aksi = 1;
            playerAttacking = true; //Queue the animation
            obHero.currentEnergy = 100; //it costs energy to attempt to flee
            
            obHero.critical = random(2);
            obHero.damage = 0;
            obHero.mAdamage = 10 * (obHero.currentMana / enemyID.currentMana) + 15 * (enemyID.currentHealth / obHero.currentHealth);
            obHero.mBdamage = 0;
            obHero.currentMana -= 15;
            
            if(obHero.critical &gt;= 1.5){
                obHero.mAdamage += 8*(random(100)/obHero.currentHealth);
            }
            
            
            selectingEnemy = false //After attacking, make it so not selecting
            isDefending = false; //Since now attacking the enemy   
        }
    }
    
    if(battleMenuSelection == 2 &amp;&amp; keyboard_check_pressed(vk_space))
    {
        if(status == true) //Must have at least half energy to defend
        {
            status = false;
            aksi = 2;
            playerAttacking = true; //Queue the animation
            obHero.currentEnergy = 100; //it costs energy to attempt to flee
            
            obHero.critical = random(2);
            obHero.damage = 0;
            obHero.mAdamage = 0;
            obHero.mBdamage = 10 + (10 * (obHero.currentMana / enemyID.currentMana));
            
             obHero.currentMana -= 30;
            
            if(obHero.critical &gt;= 1.5){
                obHero.mBdamage += 10 * (random(100)/enemyID.currentMana);
            }
            
           
            selectingEnemy = false //After attacking, make it so not selecting
            isDefending = false; //Since now attacking the enemy   
        }
    }
    /////////////////////Defending////////////////////////////
    if(battleMenuSelection == 3 &amp;&amp; keyboard_check_pressed(vk_space))
    {
        if(status == true) //Must have at least half energy to defend
        {
            
            status = false;
            obHero.currentMana -= 10;
            obHero.currentEnergy = 100; //it costs energy to attempt to flee
            isDefending = true; //Sets it to true
            obHero.damage = 0;
            obHero.mAdamage = 0;
            obHero.mBdamage= 0;
            obHero.defense = 10 + (random(100)/100 * 20);
            obHero.defenseWhileDefending = 1.5 * obHero.defense;
            obHero.currentMana -= 10;
        }
    }
    /////////////////////////Escaping from battle///////////////
    if(battleMenuSelection == 4 &amp;&amp; keyboard_check_pressed(vk_space) &amp;&amp; obHero.currentEnergy &gt;= (obHero.maxEnergy/2))
    {
        if(status == true){
            obHero.currentEnergy = 100; //it costs energy to attempt to flee
            if(random_range(0,3) &lt;= 1) //Pull out a random number, if it's 5
                ranAway = true; //Then they successfully escaped, but get no XP
            isDefending = false; //No longer defending, since trying to run away
        }
    }
    
    if(status == true &amp;&amp; obHero.currentEnergy == 0){
        status = false;
        obHero.currentEnergy = 100;
    }
    //Undoing choosing to attack
    if(keyboard_check(vk_escape) &amp;&amp; selectingEnemy &amp;&amp; status == false)
    {
        selectingEnemy = false; //Return to selecting the menu options, instead of enemies
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Battle Menu Options
if(inCombat) //Only draw battle menu while in battle
{
    for(i = 0; i &lt; array_length_1d(battleMenu); ++i) //Gets array length, draws each option
    {
        draw_text(70 * i + 10, 170, battleMenu[i]); //Draws the battle menu at the bottom of the screen
        
        if(i == battleMenuSelection) //Checking if selection and spot line up
        {
            draw_line_colour(70 * i + 10, 170, 70 * i + 70, 170, c_red, c_red); //Draw line underneath selected option
        }
    }
    
    draw_text(obHero.x + 50, obHero.y, action);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Healthbar &amp; Names
if(inCombat)
{
    //Draw enemy health
    draw_healthbar(enemyID.x - 15, enemyID.y - 30, enemyID.x + 15, enemyID.y -38,
    (enemyID.currentHealth/enemyID.maxHealth) * 100, c_black, c_red, c_lime, 0, true, true);
    
    //mana
    draw_healthbar(enemyID.x - 15, enemyID.y - 40, enemyID.x + 15, enemyID.y -45,
    (enemyID.currentMana/enemyID.maxMana) * 100, c_teal, c_blue, c_aqua, 0, true, true);
    
    //Draw enemy name
    draw_text(enemyID.x - 30, enemyID.y + 20, enemyID.name);
    
    
    draw_healthbar(obHero.x - 15, obHero.y - 30, obHero.x + 15, obHero.y -38,
    (obHero.currentHealth/obHero.maxHealth) * 100, c_black, c_red, c_lime, 0, true, true)
    
    draw_healthbar(obHero.x - 15, obHero.y - 40, obHero.x + 15, obHero.y -45,
    (obHero.currentMana/obHero.maxMana) * 100, c_teal, c_blue, c_aqua, 0, true, true);
    //////Player Name//////
    draw_text(obHero.x - 30, obHero.y + 20, obHero.firstName);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing circle over selected enemy to attack
if(inCombat &amp;&amp; selectingEnemy)
{
    draw_circle(enemyID.x, enemyID.y, 32, true);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing action bar for player and enemy
if(inCombat)
{
    //Draw action gauge for the character
    draw_healthbar(obHero.x - 25, obHero.y + 60, obHero.x + 15, obHero.y + 70,
    obHero.currentEnergy, c_dkgray, c_dkgray, c_blue, 0, true, true);
    
    //Draw action gauge for enemy
    draw_healthbar(enemyID.x - 25, enemyID.y + 60, enemyID.x + 15, enemyID.y + 70,
    enemyID.currentEnergy, c_dkgray, c_dkgray, c_blue, 0, true, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
