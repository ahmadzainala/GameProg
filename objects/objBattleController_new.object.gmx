<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setting up global variables
globalvar enemyID, inCombat, battleMenuSelection, choosingEnemy, enemySelection, playerAttacking, ranAway, isDefending;
enemyID = 0; //Initalizing enemyID
inCombat = false; //The game starts not in combat, need to initialize
battleMenuSelection = 0; //Sets up initial selection
selectingEnemy = false;//Whether the player is selecting an enemy
enemySelection = 0; //Which enemy the player is selecting
playerAttacking = false; //Whether the player is currently attacking
ranAway = false; //Player flees battle, doesn't get items or XP
isDefending = false; //Whether the player is currently defending or not

//Battle Menu, an array of options the player can choose from
battleMenu[0] = "Attack";
battleMenu[1] = "Defend";
battleMenu[2] = "Escape";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn the enemy

instance_create(1200, 150, enemyID);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Menu Selection during battles
if(inCombat) //Only selectable while in combat
{
    //Navigating through the battle menu options fluidly
    if(keyboard_check_pressed(ord("A"))) //Checks A key, could be anything
    {
        if((battleMenuSelection - 1) &lt; 0) //If player tries to go too far left
            battleMenuSelection = (array_length_1d(battleMenu) - 1); //Takes them to the last option
        else
            --battleMenuSelection; //Otherwise, they move left 1
    }
    else if(keyboard_check_pressed(ord("D")))
    {
        if((battleMenuSelection + 1) &gt; (array_length_1d(battleMenu) - 1))
            battleMenuSelection = 0;
        else
            ++battleMenuSelection;
    }
    ////////////////////Selecting an enemy to attack////////////////////////
    if(battleMenuSelection == 0 &amp;&amp; keyboard_check_pressed(vk_space))
    {
        if(!selectingEnemy) //if the player hasn't chosen to attack yet
            selectingEnemy = true; //Set it so they are choosing to attack
        else if (objSara.currentEnergy &gt;= objSara.maxEnergy)//If already selected an enemy, attack them if they have the energy ready
        {
            playerAttacking = true; //Queue the animation
            objSara.sprite_index = sprSaraShootRight; //Ensure player is on the right one
            objSara.image_speed = 0.1; //Start playing the animation
            objSara.currentEnergy = 0;//Reset their energy gauge
            selectingEnemy = false //After attacking, make it so not selecting
            isDefending = false; //Since now attacking the enemy
        }
    }
    /////////////////////Defending////////////////////////////
    if(battleMenuSelection == 1 &amp;&amp; keyboard_check_pressed(vk_space))
    {
        if(objSara.currentEnergy &gt; (objSara.maxEnergy/2)) //Must have at least half energy to defend
        {
            isDefending = true; //Sets it to true
            objSara.currentEnergy -= (objSara.maxEnergy/2); //Only uses up half energy
        }
    }
    /////////////////////////Escaping from battle///////////////
    if(battleMenuSelection == 2 &amp;&amp; keyboard_check_pressed(vk_space) &amp;&amp; objSara.currentEnergy &gt;= (objSara.maxEnergy/2))
    {
        objSara.currentEnergy -= (objSara.maxEnergy/2); //it costs energy to attempt to flee
        if(irandom_range(0, 3) == 1) //Pull out a random number, if it's 5
            ranAway = true; //Then they successfully escaped, but get no XP
        isDefending = false; //No longer defending, since trying to run away
    }
    //Undoing choosing to attack
    if(keyboard_check(vk_escape) &amp;&amp; selectingEnemy)
    {
        selectingEnemy = false; //Return to selecting the menu options, instead of enemies
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Checking win conditions
if(inCombat)
{
    if(enemyID.currentHealth &lt;= 0)
    {
        objSara.currentXP += enemyID.XP; //Grant character the XP of the dead enemy
        with(enemyID) //Destroy the enemy
            instance_destroy();
        room_goto(rmStart); //Go back to the last room
        //Move character back to original location
        objSara.x = objSara.beforeBattleX;
        objSara.y = objSara.beforeBattleY;
        objSara.sprite_index = sprSaraWalkDown;//Change sprite from battle
        instance_create(0, 0, objFade); //Fades the screen
        inCombat = false; //No longer in combat
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Successfully running from battle
if(ranAway)
{
    with(enemyID) //Destroy the enemy
        instance_destroy();
    room_goto(rmStart); //Go back to the last room
    //Move character back to original location
    objSara.x = objSara.beforeBattleX;
    objSara.y = objSara.beforeBattleY;
    objSara.sprite_index = sprSaraWalkDown;//Change sprite from battle
    instance_create(0, 0, objFade); //Fades the screen
    inCombat = false; //No longer in combat
    ranAway = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Increase players defense while defending
if(inCombat)
{
    if(isDefending) //If player is defending
        objSara.defense = objSara.defenseWhileDefending; //Increase defense
    if(!isDefending)
        objSara.defense = 1; //Otherwise make it original defense
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Battle Menu Options
if(inCombat) //Only draw battle menu while in battle
{
    for(i = 0; i &lt; array_length_1d(battleMenu); ++i) //Gets array length, draws each option
    {
        draw_text(200 * i + 450, 660, battleMenu[i]); //Draws the battle menu at the bottom of the screen
        
        if(i == battleMenuSelection) //Checking if selection and spot line up
        {
            draw_line_colour(200 * i + 445, 680, 200 * i + 510, 680, c_red, c_red); //Draw line underneath selected option
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Healthbar &amp; Names
if(inCombat)
{
    //Draw enemy health
    draw_healthbar(enemyID.x - 20, enemyID.y - 45, enemyID.x + 20, enemyID.y -60,
    (enemyID.currentHealth/enemyID.maxHealth) * 100, c_black, c_red, c_lime, 0, true, true);
    
    //Draw enemy name
    draw_text(enemyID.x - 30, enemyID.y + 35, enemyID.name);
    
    //////Player Name//////
    draw_text(objSara.x - 30, objSara.y + 35, objSara.firstName);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing circle over selected enemy to attack
if(inCombat &amp;&amp; selectingEnemy)
{
    draw_circle(enemyID.x, enemyID.y, 32, true);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing action bar for player and enemy
if(inCombat)
{
    //Draw action gauge for the character
    draw_healthbar(objSara.x - 25, objSara.y + 60, objSara.x + 15, objSara.y + 70,
    (objSara.currentEnergy/objSara.maxEnergy) * 100, c_dkgray, c_dkgray, c_blue, 0, true, true);
    
    //Draw action gauge for enemy
    draw_healthbar(enemyID.x - 25, enemyID.y + 60, enemyID.x + 15, enemyID.y + 70,
    (enemyID.currentEnergy/enemyID.maxEnergy) * 100, c_dkgray, c_dkgray, c_blue, 0, true, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
